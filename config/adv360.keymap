#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&sk {
    release-after-ms = <2000>;
    quick-release;
};

&sl { release-after-ms = <2000>; };

/ {
    behaviors {
        #include "macros.dtsi"
        #include "version.dtsi"
        #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        #endif

        tp_kp: tp_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "TP_KP";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <0>;
        };

        hrm_l: hrm_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_L";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <250>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 38 39 40 41 42 43 44 45 54 55 56 57 58 59 69 70 71 72 73 74 75 35 36 37 38 52 53 65 66 67 68 69 70 61 62 63 64 60>;
        };

        hrm_r: hrm_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_R";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <250>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67 37 38 53 68 69 70 71 72 73 74 75>;
        };

        hp_mo: hp_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "HP_MO";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
            quick-tap-ms = <200>;
        };

        hp_kp: hp_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HP_KP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <200>;
        };

        tpd_sk_shift: tpd_sk_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "TPD_SK_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&sk LSHIFT>;
        };

        tp_mo: tp_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "TP_MO";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
        };

        to_mo: to_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "TO_MO";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
        };

        st_layer: st_layer {
            compatible = "zmk,behavior-sticky-key";
            label = "ST_LAYER";
            bindings = <&mo>;
            #binding-cells = <1>;
            release-after-ms = <2000>;
            quick-release;
            ignore-modifiers;
        };

        kp_to: kp_to {
            compatible = "zmk,behavior-hold-tap";
            label = "KP_TO";
            bindings = <&to>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        kt_kp: kt_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "KT_KP";
            bindings = <&kp>, <&kt>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
        };
    };

    macros {
        /**
         * Temporarily switches to a layer (`&mo`) while a modifier is held.
         * Analogous to QMK's `LM()`, using a parameterized macro.
         *
         * Params:
         *  1. Layer to switch to
         *  2. Modifier to press while layer is active
         *
         * Example:
         *  `&lm NUM_LAYER LSHIFT`
         */

        lm: lm {
            label = "lm";
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        re_kp_3: re_kp_3 {
            wait-ms = <5>;
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>;

            label = "RE_KP_3";
        };

        re_kp_5: re_kp_5 {
            wait-ms = <5>;
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>;

            label = "RE_KP_5";
        };

        re_kp_scroll: re_kp_scroll {
            wait-ms = <1>;
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>;

            label = "RE_KP_SCROLL";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&hp_kp LS(LA(LC(LGUI))) ESC  &kp N1     &kp N2   &kp N3    &kp N4    &kp N5      &tog 3                                                                    &mo 5                   &kp N6  &kp N7    &kp N8     &kp N9    &kp N0     &kp BSPC
&kp TAB                      &kp Q      &kp W    &kp E     &kp R     &kp T       &kp_to 1 TAB                                                              &kp LS(LA(LC(LG(N3))))  &kp Y   &kp U     &kp I      &kp O     &kp P      &hp_kp RGUI BACKSLASH
&to_mo 2 2                   &kp A      &kp S    &kp D     &kp F     &kp G       &kp LS(LA(LC(LG(N2))))  &sk LSHIFT  &sk LGUI       &sk RGUI   &sk RSHIFT  &kp LS(LA(LC(LG(N4))))  &kp H   &kp J     &kp K      &kp L     &kp SEMI   &kp ENTER
&sk LSHIFT                   &kp Z      &kp X    &kp C     &kp V     &tp_mo 6 B                                      &sk LCTRL      &sk RCTRL                                      &kp N   &kp M     &kp COMMA  &kp DOT   &kp SLASH  &sk RSHIFT
&kp EQUAL                    &kp GRAVE  &kp SQT  &kp LBKT  &kp RBKT              &sk LALT                &sk LCTRL   &sk LALT       &sk RALT   &sl 4       &kp SPACE                       &kp LEFT  &kp UP     &kp DOWN  &kp RIGHT  &kp MINUS
            >;
        };

        dvorak_layer {
            bindings = <
&trans  &kp N1    &kp N2     &kp N3   &kp N4  &kp N5  &trans                                      &trans  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &trans
&trans  &kp APOS  &kp COMMA  &kp DOT  &kp P   &kp Y   &to 0                                       &trans  &kp F   &kp G   &kp C   &kp R   &kp L   &hp_kp RGUI FSLH
&trans  &kp A     &kp O      &kp E    &kp U   &kp I   &trans  &trans  &trans      &trans  &trans  &trans  &kp D   &kp H   &kp T   &kp N   &kp S   &trans
&trans  &kp SEMI  &kp Q      &kp J    &kp K   &kp X                   &trans      &trans                  &kp B   &kp M   &kp W   &kp V   &kp Z   &trans
&trans  &trans    &trans     &trans   &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        ham_keys_layer {
            bindings = <
&trans      &kp LC(LA(N1))  &kp LC(LA(N2))  &kp LC(LA(N3))  &kp LC(LA(N4))  &kp LC(LA(N5))  &trans                                      &trans  &kp LC(LA(N6))  &kp LC(LA(N7))  &kp LC(LA(N8))     &kp LC(LA(N9))   &kp LC(LA(N0))    &trans
&trans      &kp LC(LA(Q))   &kp LC(LA(W))   &kp LC(LA(E))   &kp LC(LA(R))   &kp LC(LA(T))   &trans                                      &trans  &kp LC(LA(Y))   &kp LC(LA(U))   &kp LC(LA(I))      &kp LC(LA(O))    &kp LC(LA(P))     &trans
&to_mo 0 0  &kp LC(LA(A))   &kp LC(LA(S))   &kp LC(LA(D))   &to 0           &kp LC(LA(G))   &trans  &trans  &trans      &trans  &trans  &trans  &kp LC(LA(H))   &kp LC(LA(J))   &kp LC(LA(K))      &kp LC(LA(L))    &kp LC(LA(SEMI))  &trans
&trans      &kp LC(LA(Z))   &kp LC(LA(X))   &kp LC(LA(C))   &kp LC(LA(V))   &kp LC(LA(B))                   &trans      &trans                  &kp LC(LA(N))   &kp LC(LA(M))   &kp LC(LA(COMMA))  &kp LC(LA(DOT))  &kp LC(LA(FSLH))  &trans
&trans      &trans          &trans          &trans          &trans                          &trans  &trans  &trans      &trans  &trans  &trans                  &trans          &trans             &trans           &trans            &trans
            >;
        };

        keypad {
            bindings = <
&kp ESC     &trans  &trans  &trans  &trans  &trans  &trans                                             &trans  &trans        &kp UNDER  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &trans
&kp TAB     &trans  &trans  &trans  &trans  &trans  &trans                                             &trans  &kp KP_COMMA  &kp KP_N7  &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp RGUI
&kp LALT    &trans  &trans  &trans  &trans  &trans  &trans     &trans     &trans      &kp F5   &kp F6  &trans  &kp KP_DOT    &kp KP_N4  &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &trans
&kp LSHIFT  &trans  &trans  &trans  &trans  &trans                        &trans      &kp F10                  &trans        &kp KP_N1  &kp KP_N2     &kp KP_N3      &kp KP_N0        &trans
&trans      &none   &none   &trans  &trans          &kp SPACE  &kp LCTRL  &trans      &kp F9   &trans  &trans                &trans     &trans        &none          &none            &trans
            >;
        };

        sym {
            bindings = <
&kp GRAVE  &kp EXCL  &kp AT    &kp POUND  &kp DOLLAR  &kp PERCENT  &trans                                                                              &trans  &kp CARET     &kp AMPS       &kp STAR   &kp LPAR       &kp RPAR   &trans
&kp TILDE  &kp LT    &kp DQT   &kp UNDER  &kp GT      &kp TAB      &kp F1                                                                              &kp F3  &kp LA(UP)    &kp LA(LEFT)   &kp UP     &kp LA(RIGHT)  &kp PIPE   &kp BACKSLASH
&trans     &kp PLUS  &kp SQT   &kp MINUS  &kp EQUAL   &kp ESC      &kp F2  &hp_kp LSHIFT F11  &hp_kp LCTRL F12      &hp_kp RCTRL F5  &hp_kp RSHIFT F6  &kp F4  &kp LA(DOWN)  &kp LEFT       &kp DOWN   &kp RIGHT      &kp SEMI   &kp COLON
&trans     &kp LBKT  &kp RBKT  &kp LBRC   &kp RBRC    &kp SPACE                               &hp_kp LGUI F8        &hp_kp RCMD F10                            &kp ENTER     &kp LC(SPACE)  &kp COMMA  &kp DOT        &kp SLASH  &kp QUESTION
&trans     &trans    &trans    &trans     &trans                   &trans  &trans             &hp_kp LALT F7        &hp_kp RCMD F9   &trans            &trans                &kp HOME       &kp PG_UP  &kp PG_DN      &kp END    &trans
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none  &none       &none       &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none  &none       &none       &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none  &none       &none       &none  &none
&none  &none         &none         &none         &macro_ver    &none                             &none      &none                                           &none  &none  &none       &none       &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &none  &bl BL_DEC  &bl BL_INC  &none  &none
            >;
        };

        nav {
            bindings = <
&none  &kp F1        &kp F2        &kp F3      &kp F4        &kp F5              &none                                          &none   &kp F6     &kp F7    &kp F8    &kp F9     &kp F10     &kp F11
&none  &kp C_BRI_UP  &kp C_VOL_DN  &kp C_MUTE  &kp C_VOL_UP  &re_kp_scroll UP    &kp F1                                         &kp F3  &kp PG_UP  &kp HOME  &kp UP    &kp END    &kp INSERT  &kp F12
&none  &kp C_BRI_DN  &kp C_PREV    &kp C_PP    &kp C_NEXT    &re_kp_scroll DOWN  &kp F2  &kp F11  &kp F12      &kp F5   &kp F6  &kp F4  &kp PG_DN  &kp LEFT  &kp DOWN  &kp RIGHT  &kp DELETE  &none
&none  &none         &none         &none       &none         &none                                &kp F8       &kp F10                  &none      &none     &none     &none      &none       &none
&none  &none         &none         &none       &none                             &trans  &trans   &kp F7       &kp F9   &trans  &trans             &none     &none     &none      &none       &none
            >;
        };
    };
};
